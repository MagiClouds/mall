// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartReply, error)
	IncrItem(ctx context.Context, in *IncrItemRequest, opts ...grpc.CallOption) (*IncrItemReply, error)
	DecrItem(ctx context.Context, in *DecrItemRequest, opts ...grpc.CallOption) (*DecrItemReply, error)
	DeleteItemById(ctx context.Context, in *DeleteCartItemRequest, opts ...grpc.CallOption) (*DeleteCartItemReply, error)
	CleanCart(ctx context.Context, in *CleanCartRequest, opts ...grpc.CallOption) (*CleanCartReply, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartReply, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartReply, error) {
	out := new(CreateCartReply)
	err := c.cc.Invoke(ctx, "/api.cart.sevrice.v1.Cart/CreateCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) IncrItem(ctx context.Context, in *IncrItemRequest, opts ...grpc.CallOption) (*IncrItemReply, error) {
	out := new(IncrItemReply)
	err := c.cc.Invoke(ctx, "/api.cart.sevrice.v1.Cart/IncrItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) DecrItem(ctx context.Context, in *DecrItemRequest, opts ...grpc.CallOption) (*DecrItemReply, error) {
	out := new(DecrItemReply)
	err := c.cc.Invoke(ctx, "/api.cart.sevrice.v1.Cart/DecrItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) DeleteItemById(ctx context.Context, in *DeleteCartItemRequest, opts ...grpc.CallOption) (*DeleteCartItemReply, error) {
	out := new(DeleteCartItemReply)
	err := c.cc.Invoke(ctx, "/api.cart.sevrice.v1.Cart/DeleteItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) CleanCart(ctx context.Context, in *CleanCartRequest, opts ...grpc.CallOption) (*CleanCartReply, error) {
	out := new(CleanCartReply)
	err := c.cc.Invoke(ctx, "/api.cart.sevrice.v1.Cart/CleanCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartReply, error) {
	out := new(GetCartReply)
	err := c.cc.Invoke(ctx, "/api.cart.sevrice.v1.Cart/GetCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	CreateCart(context.Context, *CreateCartRequest) (*CreateCartReply, error)
	IncrItem(context.Context, *IncrItemRequest) (*IncrItemReply, error)
	DecrItem(context.Context, *DecrItemRequest) (*DecrItemReply, error)
	DeleteItemById(context.Context, *DeleteCartItemRequest) (*DeleteCartItemReply, error)
	CleanCart(context.Context, *CleanCartRequest) (*CleanCartReply, error)
	GetCart(context.Context, *GetCartRequest) (*GetCartReply, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) CreateCart(context.Context, *CreateCartRequest) (*CreateCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedCartServer) IncrItem(context.Context, *IncrItemRequest) (*IncrItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrItem not implemented")
}
func (UnimplementedCartServer) DecrItem(context.Context, *DecrItemRequest) (*DecrItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrItem not implemented")
}
func (UnimplementedCartServer) DeleteItemById(context.Context, *DeleteCartItemRequest) (*DeleteCartItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemById not implemented")
}
func (UnimplementedCartServer) CleanCart(context.Context, *CleanCartRequest) (*CleanCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanCart not implemented")
}
func (UnimplementedCartServer) GetCart(context.Context, *GetCartRequest) (*GetCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cart.sevrice.v1.Cart/CreateCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).CreateCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_IncrItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).IncrItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cart.sevrice.v1.Cart/IncrItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).IncrItem(ctx, req.(*IncrItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_DecrItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).DecrItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cart.sevrice.v1.Cart/DecrItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).DecrItem(ctx, req.(*DecrItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_DeleteItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).DeleteItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cart.sevrice.v1.Cart/DeleteItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).DeleteItemById(ctx, req.(*DeleteCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_CleanCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).CleanCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cart.sevrice.v1.Cart/CleanCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).CleanCart(ctx, req.(*CleanCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cart.sevrice.v1.Cart/GetCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.cart.sevrice.v1.Cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCart",
			Handler:    _Cart_CreateCart_Handler,
		},
		{
			MethodName: "IncrItem",
			Handler:    _Cart_IncrItem_Handler,
		},
		{
			MethodName: "DecrItem",
			Handler:    _Cart_DecrItem_Handler,
		},
		{
			MethodName: "DeleteItemById",
			Handler:    _Cart_DeleteItemById_Handler,
		},
		{
			MethodName: "CleanCart",
			Handler:    _Cart_CleanCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _Cart_GetCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cart/sevrice/v1/cart.proto",
}
